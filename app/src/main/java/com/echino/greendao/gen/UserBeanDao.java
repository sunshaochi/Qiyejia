package com.echino.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.boyuanitsm.echinfo.bean.UserBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_BEAN".
*/
public class UserBeanDao extends AbstractDao<UserBean, String> {

    public static final String TABLENAME = "USER_BEAN";

    /**
     * Properties of entity UserBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Username = new Property(1, String.class, "username", false, "USERNAME");
        public final static Property Password = new Property(2, String.class, "password", false, "PASSWORD");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property MobilePhoneKey = new Property(4, String.class, "mobilePhoneKey", false, "MOBILE_PHONE_KEY");
        public final static Property Phone = new Property(5, String.class, "phone", false, "PHONE");
        public final static Property BindMobileCount = new Property(6, String.class, "bindMobileCount", false, "BIND_MOBILE_COUNT");
        public final static Property Email = new Property(7, String.class, "email", false, "EMAIL");
        public final static Property Qq = new Property(8, String.class, "qq", false, "QQ");
        public final static Property Wechat = new Property(9, String.class, "wechat", false, "WECHAT");
        public final static Property Icon = new Property(10, String.class, "icon", false, "ICON");
        public final static Property Token = new Property(11, String.class, "token", false, "TOKEN");
        public final static Property ReferralCode = new Property(12, String.class, "referralCode", false, "REFERRAL_CODE");
        public final static Property MyReferralCode = new Property(13, String.class, "myReferralCode", false, "MY_REFERRAL_CODE");
        public final static Property CompanyName = new Property(14, String.class, "companyName", false, "COMPANY_NAME");
        public final static Property CompanyAddr = new Property(15, String.class, "companyAddr", false, "COMPANY_ADDR");
        public final static Property CompanyPhone = new Property(16, String.class, "companyPhone", false, "COMPANY_PHONE");
        public final static Property Job = new Property(17, String.class, "job", false, "JOB");
        public final static Property UserType = new Property(18, String.class, "userType", false, "USER_TYPE");
        public final static Property IsValid = new Property(19, String.class, "isValid", false, "IS_VALID");
        public final static Property CreatePersonId = new Property(20, String.class, "createPersonId", false, "CREATE_PERSON_ID");
        public final static Property CreateTime = new Property(21, String.class, "createTime", false, "CREATE_TIME");
        public final static Property ModifyPersonId = new Property(22, String.class, "modifyPersonId", false, "MODIFY_PERSON_ID");
        public final static Property ModifyTime = new Property(23, String.class, "modifyTime", false, "MODIFY_TIME");
        public final static Property Remark = new Property(24, String.class, "remark", false, "REMARK");
        public final static Property Empno = new Property(25, String.class, "empno", false, "EMPNO");
        public final static Property DictId = new Property(26, String.class, "dictId", false, "DICT_ID");
        public final static Property Accredit = new Property(27, String.class, "accredit", false, "ACCREDIT");
    };


    public UserBeanDao(DaoConfig config) {
        super(config);
    }
    
    public UserBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_BEAN\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"USERNAME\" TEXT," + // 1: username
                "\"PASSWORD\" TEXT," + // 2: password
                "\"NAME\" TEXT," + // 3: name
                "\"MOBILE_PHONE_KEY\" TEXT," + // 4: mobilePhoneKey
                "\"PHONE\" TEXT," + // 5: phone
                "\"BIND_MOBILE_COUNT\" TEXT," + // 6: bindMobileCount
                "\"EMAIL\" TEXT," + // 7: email
                "\"QQ\" TEXT," + // 8: qq
                "\"WECHAT\" TEXT," + // 9: wechat
                "\"ICON\" TEXT," + // 10: icon
                "\"TOKEN\" TEXT," + // 11: token
                "\"REFERRAL_CODE\" TEXT," + // 12: referralCode
                "\"MY_REFERRAL_CODE\" TEXT," + // 13: myReferralCode
                "\"COMPANY_NAME\" TEXT," + // 14: companyName
                "\"COMPANY_ADDR\" TEXT," + // 15: companyAddr
                "\"COMPANY_PHONE\" TEXT," + // 16: companyPhone
                "\"JOB\" TEXT," + // 17: job
                "\"USER_TYPE\" TEXT," + // 18: userType
                "\"IS_VALID\" TEXT," + // 19: isValid
                "\"CREATE_PERSON_ID\" TEXT," + // 20: createPersonId
                "\"CREATE_TIME\" TEXT," + // 21: createTime
                "\"MODIFY_PERSON_ID\" TEXT," + // 22: modifyPersonId
                "\"MODIFY_TIME\" TEXT," + // 23: modifyTime
                "\"REMARK\" TEXT," + // 24: remark
                "\"EMPNO\" TEXT," + // 25: empno
                "\"DICT_ID\" TEXT," + // 26: dictId
                "\"ACCREDIT\" TEXT);"); // 27: accredit
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String mobilePhoneKey = entity.getMobilePhoneKey();
        if (mobilePhoneKey != null) {
            stmt.bindString(5, mobilePhoneKey);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(6, phone);
        }
 
        String bindMobileCount = entity.getBindMobileCount();
        if (bindMobileCount != null) {
            stmt.bindString(7, bindMobileCount);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(8, email);
        }
 
        String qq = entity.getQq();
        if (qq != null) {
            stmt.bindString(9, qq);
        }
 
        String wechat = entity.getWechat();
        if (wechat != null) {
            stmt.bindString(10, wechat);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(11, icon);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(12, token);
        }
 
        String referralCode = entity.getReferralCode();
        if (referralCode != null) {
            stmt.bindString(13, referralCode);
        }
 
        String myReferralCode = entity.getMyReferralCode();
        if (myReferralCode != null) {
            stmt.bindString(14, myReferralCode);
        }
 
        String companyName = entity.getCompanyName();
        if (companyName != null) {
            stmt.bindString(15, companyName);
        }
 
        String companyAddr = entity.getCompanyAddr();
        if (companyAddr != null) {
            stmt.bindString(16, companyAddr);
        }
 
        String companyPhone = entity.getCompanyPhone();
        if (companyPhone != null) {
            stmt.bindString(17, companyPhone);
        }
 
        String job = entity.getJob();
        if (job != null) {
            stmt.bindString(18, job);
        }
 
        String userType = entity.getUserType();
        if (userType != null) {
            stmt.bindString(19, userType);
        }
 
        String isValid = entity.getIsValid();
        if (isValid != null) {
            stmt.bindString(20, isValid);
        }
 
        String createPersonId = entity.getCreatePersonId();
        if (createPersonId != null) {
            stmt.bindString(21, createPersonId);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(22, createTime);
        }
 
        String modifyPersonId = entity.getModifyPersonId();
        if (modifyPersonId != null) {
            stmt.bindString(23, modifyPersonId);
        }
 
        String modifyTime = entity.getModifyTime();
        if (modifyTime != null) {
            stmt.bindString(24, modifyTime);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(25, remark);
        }
 
        String empno = entity.getEmpno();
        if (empno != null) {
            stmt.bindString(26, empno);
        }
 
        String dictId = entity.getDictId();
        if (dictId != null) {
            stmt.bindString(27, dictId);
        }
 
        String accredit = entity.getAccredit();
        if (accredit != null) {
            stmt.bindString(28, accredit);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String mobilePhoneKey = entity.getMobilePhoneKey();
        if (mobilePhoneKey != null) {
            stmt.bindString(5, mobilePhoneKey);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(6, phone);
        }
 
        String bindMobileCount = entity.getBindMobileCount();
        if (bindMobileCount != null) {
            stmt.bindString(7, bindMobileCount);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(8, email);
        }
 
        String qq = entity.getQq();
        if (qq != null) {
            stmt.bindString(9, qq);
        }
 
        String wechat = entity.getWechat();
        if (wechat != null) {
            stmt.bindString(10, wechat);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(11, icon);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(12, token);
        }
 
        String referralCode = entity.getReferralCode();
        if (referralCode != null) {
            stmt.bindString(13, referralCode);
        }
 
        String myReferralCode = entity.getMyReferralCode();
        if (myReferralCode != null) {
            stmt.bindString(14, myReferralCode);
        }
 
        String companyName = entity.getCompanyName();
        if (companyName != null) {
            stmt.bindString(15, companyName);
        }
 
        String companyAddr = entity.getCompanyAddr();
        if (companyAddr != null) {
            stmt.bindString(16, companyAddr);
        }
 
        String companyPhone = entity.getCompanyPhone();
        if (companyPhone != null) {
            stmt.bindString(17, companyPhone);
        }
 
        String job = entity.getJob();
        if (job != null) {
            stmt.bindString(18, job);
        }
 
        String userType = entity.getUserType();
        if (userType != null) {
            stmt.bindString(19, userType);
        }
 
        String isValid = entity.getIsValid();
        if (isValid != null) {
            stmt.bindString(20, isValid);
        }
 
        String createPersonId = entity.getCreatePersonId();
        if (createPersonId != null) {
            stmt.bindString(21, createPersonId);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(22, createTime);
        }
 
        String modifyPersonId = entity.getModifyPersonId();
        if (modifyPersonId != null) {
            stmt.bindString(23, modifyPersonId);
        }
 
        String modifyTime = entity.getModifyTime();
        if (modifyTime != null) {
            stmt.bindString(24, modifyTime);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(25, remark);
        }
 
        String empno = entity.getEmpno();
        if (empno != null) {
            stmt.bindString(26, empno);
        }
 
        String dictId = entity.getDictId();
        if (dictId != null) {
            stmt.bindString(27, dictId);
        }
 
        String accredit = entity.getAccredit();
        if (accredit != null) {
            stmt.bindString(28, accredit);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public UserBean readEntity(Cursor cursor, int offset) {
        UserBean entity = new UserBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // username
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // password
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // mobilePhoneKey
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // phone
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // bindMobileCount
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // email
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // qq
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // wechat
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // icon
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // token
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // referralCode
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // myReferralCode
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // companyName
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // companyAddr
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // companyPhone
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // job
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // userType
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // isValid
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // createPersonId
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // createTime
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // modifyPersonId
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // modifyTime
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // remark
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // empno
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // dictId
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27) // accredit
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUsername(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPassword(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMobilePhoneKey(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPhone(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBindMobileCount(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEmail(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setQq(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setWechat(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIcon(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setToken(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setReferralCode(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setMyReferralCode(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCompanyName(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setCompanyAddr(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setCompanyPhone(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setJob(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setUserType(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setIsValid(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setCreatePersonId(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setCreateTime(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setModifyPersonId(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setModifyTime(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setRemark(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setEmpno(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setDictId(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setAccredit(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
     }
    
    @Override
    protected final String updateKeyAfterInsert(UserBean entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(UserBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
